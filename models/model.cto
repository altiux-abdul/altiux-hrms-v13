/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.altiux.hrms

enum Status {
  o REQUESTED
  o APPROVED
  o DENIED
  o PENDING
  o UNDER_REVIEW
  o VERIFIED
}

concept Profile {
  o String firstName
  o String lastName
  o String phone
  o String dob optional
  o String profile optional
  o String nationality optional
  o String address optional
}

concept ResponseTotal {
  		o String message default="success" optional
        o Double total
    }

asset Wallet identified by walletId {
  o String walletId
  o String description default="This is Wallet" optional
  o Double balance
  o Boolean isAssigned default=false
}

asset Funds identified by fundId {
  o String fundId
  o String description default="This is fund" optional
  o Double balance
   --> Manager owner
  o Boolean isAssigned default=false
}

enum SalaryStatus{
  o PAID
  o UNPAID
}

asset Document identified by documentId {
    o String documentId
    o String title
    o String documentHash
    o Status status default="REQUESTED"
  	o String approver optional
    -->Participant owner
}

/** external payment transactions **/  
asset RecordPaymentTransaction identified by txtId {
  o String txtId
  o String gateway
  o String method
  o String sender
  o String receiver
  o Double amount
  o DateTime txtDate default="1900-01-01" 
}

participant Admin identified by adminId {
   o String adminId
   o Profile profile
   --> Wallet wallet
}
  
participant Director identified by directorId {
   o String directorId
   o Double salary default=0.0
   o Profile profile
   --> Wallet wallet
}  
  
participant Manager identified by managerId {
   o String managerId
   o Double salary default=0.0	
   o Profile profile
   --> Wallet wallet
}
  
participant Employee identified by employeeId {
  o String employeeId
  o SalaryStatus salaryStatus default="UNPAID"
  o Double salary
  o Profile profile
  --> Wallet wallet
  o Status status default="REQUESTED" optional
  o String approver optional
  
}

participant Customer identified by customerId {
  o String customerId
  o Profile profile
  --> Wallet wallet
}

participant Vendor identified by vendorId {
   o String vendorId
   o Profile profile
   --> Wallet wallet
}
  
participant Consultant identified by consultantId {
   o String consultantId
   o Profile profile
   --> Wallet wallet
}   

  
/** All participant create transactions **/  
transaction CreateParticipant {
  o String participantId
  o String participantType
  o Profile profile
  o Double salary default=0.00 optional
  --> Wallet wallet
}
  
/** Director transactions **/  
transaction PaymentTransferByDirector {
  o Double amount
  --> Director director
  --> Wallet wallet
}

/** Manager transactions **/  
transaction FundAddByManager {
  o Double amount
  --> Manager manager
  --> Funds fund
}
  
/**** generic wallet to wallet transfer transaction ****/

/*** Fund(salary) transfer by manager to employee ****/
transaction FundTransferByManager {
  o Double amount
  --> Funds fund
  --> Manager manager
  --> Employee employee
} 

/*** payment transfer by manager to Vendor and consultant directly their wallets ****/
transaction PaymentTransferByManager {
  o Double amount
  --> Manager manager
  --> Participant receiver optional
  --> Wallet wallet
}

/*** salary transfer by manager to employee ****/
transaction EmployeeSalary {
  --> Funds fund
  --> Manager manager
  --> Employee employee
}

transaction UpdateEmployee {
    --> Employee employee
}

/** Customer transactions **/  
transaction PaymentTransferByCustomer {
  o Double amount
  --> Customer customer
  --> Wallet wallet
  
}

/** Admin transactions **/    
transaction UpdateDocument {
    --> Admin admin
    --> Document document
}
  
  
/**** EVENT SECTION ***********/
event PaymentTransferByDirectorEvent {
  o Double amount
  o String directorId
  o String walletId
 }
  
 event FundAddByManagerEvent {
  o Double amount
  o String managerId
  o String fundId
 }
  
 event FundTransferByManagerEvent {
  o Double amount
  o String fundId
  o String managerId
  o String employeeId
 }
  
 event PaymentTransferByManagerEvent {
  o Double amount
  o String managerId
  o String walletId
 }
  
 event EmployeeSalaryEvent {
  o Double salary
  o String fundId
  o String managerId
  o String employeeId
 }
  
 event UpdateEmployeeEvent {
  o String employeeId
  o String managerId
 }  

 event PaymentTransferByCustomerEvent {
  o Double amount
  o String customerId
  o String walletId
 } 

 event UpdateDocumentEvent {
  o String adminId
  o String documentId
 }
  
 event CreateParticipantEvent {
  o String participantId
  o String participantType
  o String walletId
 }   
  
 /**** QUERY TRANSACTIONS **********/ 
// for individual director
//@returns(ResponseTotal)
@returns(Double)   
transaction investmentByDirectorTx {
    --> Director director
    o Integer daysFrom optional
}

// for all director
//@returns(ResponseTotal)
@returns(Double)   
transaction investmentByAllDirectorTx {
}

// for individual Manager
@returns(Double)   
transaction dividendFundToDirectorByManagerTx {
    --> Manager manager
}
// for all Managers 
transaction dividendFundToDirectorByAllManagerTx {
  
}
  
// for individual Customer
@returns(Double)   
transaction revenueFundsByCustomerTx {
    --> Customer customer
}
// for all Customers
@returns(Double)   
transaction revenueFundsByAllCustomerTx {
} 
  
// for individual Vendor
@returns(Double)   
transaction outsourceFundToVendorTx {
    --> Vendor vendor
}
// for all Vendors
@returns(Double)   
transaction outsourceFundToAllVendorTx {
}  
 
// for individual Consultant
@returns(Double)   
transaction fundToConsultantTx {
    --> Consultant consultant
}
// for all Consultants
@returns(Double)  
transaction fundToAllConsultantTx {
}
  
/****** EVENTS FOR QUERY TRANSACTIONS ***********/
event NotificationQryTx {
  o Double total
 }     
 